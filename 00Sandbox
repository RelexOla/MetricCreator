$write_trx = begin_trx;
$stop.set(1) rescue nil;
cbe = org.codehaus.janino.ClassBodyEvaluator.new;
cbe.setClassName('RowCopier');
cbe.cook('
import java.lang.Math;
import java.lang.Runtime;
import java.util.concurrent.atomic.AtomicLong;
import fi.relex.processor2.fastorm.cube.Cube;
import fi.relex.processor2.fastorm.cube.CubeView;
import fi.relex.processor2.fastorm.Row;
import fi.relex.processor2.fastorm.Table;
import fi.relex.processor2.fastorm.Trx;

    public long copyRows(final Table fromTable, final Table toTable, final AtomicLong stop) {
        final Cube fromCube = fromTable.getTransaction().cube();
        final String fromTableName = fromTable.getName();
        final String toTableName = toTable.getName();
        final AtomicLong insertCount = new AtomicLong();
        final long totalRows = fromCube.view(fromTableName).size();
        CubeView rows = fromCube.view(fromTableName);
        rows.parallelProcessRows(rows.new CubeViewProcessor("RowInserter") {
            public void process(Row oldRow) {
            if (stop.get() != 0) {
                throw new RuntimeException("Run stopped!");
                }

                Row row = new Row(toTableName);
                row.setAttribute("product_location_id", oldRow.getAttribute("product_location_id"));
                row.setAttribute("delivery_schedule_id", oldRow.getAttribute("delivery_schedule_id"));
                toTable.insert(row);
                insertCount.incrementAndGet();

                long inserts = insertCount.get();
                if ((inserts % 10000) == 0) {
                    long free_m = Runtime.getRuntime().freeMemory() / 1024 / 1024;
                    long total_m = Runtime.getRuntime().totalMemory() / 1024 / 1024;
                }
            }
        });
        return insertCount.get();
    }
');
$stop = AtomicLong.new;
row_copier = cbe.getClazz;
Job.start('copy_rows', "Copy rows") do;
  $stop.set(0);
  Rails.logger.info("Copying rows...");
  count = row_copier.new_instance.copy_rows($read_trx.get_table("product_location_delivery_schedules"), $write_trx.get_table("product_location_delivery_schedules"), $stop);
  Rails.logger.info("  -> #{count} inserted");
end;