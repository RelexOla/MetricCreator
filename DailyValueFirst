Trx.current.cube.slice(Location.where("locations.code == '9000'").first).slice(LocalDate.new.minusDays(8), LocalDate.new.minusDays(8)).view("daily_values").first
6759JQ0YSL2DEMSX

begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-03-06'), LocalDate.new('2017-02-07')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-02-27'), LocalDate.new('2017-03-03')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-02-20'), LocalDate.new('2017-02-24')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-02-20'), LocalDate.new('2017-02-24')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-02-13'), LocalDate.new('2017-02-17')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-02-06'), LocalDate.new('2017-02-10')).view("daily_values").update("open", 1,); commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-01-30'), LocalDate.new('2017-02-03')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-01-23'), LocalDate.new('2017-01-27')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-01-16'), LocalDate.new('2017-01-20')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-01-09'), LocalDate.new('2017-01-13')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-01-02'), LocalDate.new('2017-01-06')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2017-01-02'), LocalDate.new('2017-01-06')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-12-26'), LocalDate.new('2016-12-30')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-12-19'), LocalDate.new('2016-12-23')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-12-12'), LocalDate.new('2016-12-16')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-12-05'), LocalDate.new('2016-12-09')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-11-28'), LocalDate.new('2016-12-02')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-11-21'), LocalDate.new('2016-11-25')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-11-14'), LocalDate.new('2016-11-18')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-11-07'), LocalDate.new('2016-11-11')).view("daily_values").update("open", 1,);commit_trx;
begin_trx.cube.slice(Location.where("code == '9000'").first).slice(LocalDate.new('2016-10-31'), LocalDate.new('2016-11-4')).view("daily_values").update("open", 1,);commit_trx;

Trx.current.cube.slice(LocalDate.new.minusDays(8), LocalDate.new.minusDays(8)).slice(Transaction.where("transactions.type == 'SALE' || transactions.type == 'INTERNAL_SALE'").first).view("transactions").count


begin_trx;x=Fastorm::Database.fridToFid(FastormDb.database.getTableInsertManager(begin_trx.get_table('product_location_delivery_schedules').base_table).largest_frid); System.out.println x;